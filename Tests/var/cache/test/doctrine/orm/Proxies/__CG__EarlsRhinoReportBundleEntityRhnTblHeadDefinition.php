<?php

namespace Proxies\__CG__\Earls\RhinoReportBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RhnTblHeadDefinition extends \Earls\RhinoReportBundle\Entity\RhnTblHeadDefinition implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'columns', 'displayId', 'parent', 'path', 'exportConfig', 'data', 'attributes'];
        }

        return ['__isInitialized__', 'id', 'columns', 'displayId', 'parent', 'path', 'exportConfig', 'data', 'attributes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RhnTblHeadDefinition $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getColumns()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getColumns', []);

        return parent::getColumns();
    }

    /**
     * {@inheritDoc}
     */
    public function setColumn($displayId, $displayName, $attr = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColumn', [$displayId, $displayName, $attr]);

        return parent::setColumn($displayId, $displayName, $attr);
    }

    /**
     * {@inheritDoc}
     */
    public function setColumns(array $columnNames)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setColumns', [$columnNames]);

        return parent::setColumns($columnNames);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setData(\Earls\RhinoReportBundle\Module\Table\Util\DataObject $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function end()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'end', []);

        return parent::end();
    }

    /**
     * {@inheritDoc}
     */
    public function setExportConfig($type, \Earls\RhinoReportBundle\Templating\ExportConfigurator\ExportConfigurator $config)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExportConfig', [$type, $config]);

        return parent::setExportConfig($type, $config);
    }

    /**
     * {@inheritDoc}
     */
    public function setExportConfigs(array $configs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExportConfigs', [$configs]);

        return parent::setExportConfigs($configs);
    }

    /**
     * {@inheritDoc}
     */
    public function getExportConfig($type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExportConfig', [$type]);

        return parent::getExportConfig($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute($attr, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', [$attr, $value]);

        return parent::setAttribute($attr, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributes(array $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributes', [$attributes]);

        return parent::setAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayId', []);

        return parent::getDisplayId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayId($displayId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayId', [$displayId]);

        return parent::setDisplayId($displayId);
    }

}
