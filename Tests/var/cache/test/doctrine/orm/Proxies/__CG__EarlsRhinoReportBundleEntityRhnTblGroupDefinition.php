<?php

namespace Proxies\__CG__\Earls\RhinoReportBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class RhnTblGroupDefinition extends \Earls\RhinoReportBundle\Entity\RhnTblGroupDefinition implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'orderBy', 'groupBy', 'rowSpan', 'groupAction', 'extendingGroupAction', 'action', 'conditionalFormattings', 'displayId', 'rhnTblGroupDefinition', 'rhnTblMainDefinition', 'rhnTblGroupDefinitions', 'rhnTblRowDefinitions', 'initItem', 'parent', 'items', 'rowSpans', 'actions', 'path', 'exportConfig', 'data', 'attributes'];
        }

        return ['__isInitialized__', 'id', 'orderBy', 'groupBy', 'rowSpan', 'groupAction', 'extendingGroupAction', 'action', 'conditionalFormattings', 'displayId', 'rhnTblGroupDefinition', 'rhnTblMainDefinition', 'rhnTblGroupDefinitions', 'rhnTblRowDefinitions', 'initItem', 'parent', 'items', 'rowSpans', 'actions', 'path', 'exportConfig', 'data', 'attributes'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (RhnTblGroupDefinition $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addGroup($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addGroup', [$id]);

        return parent::addGroup($id);
    }

    /**
     * {@inheritDoc}
     */
    public function addRow(array $options)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRow', [$options]);

        return parent::addRow($options);
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItems', []);

        return parent::getItems();
    }

    /**
     * {@inheritDoc}
     */
    public function getRhnTblGroupDefinitions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRhnTblGroupDefinitions', []);

        return parent::getRhnTblGroupDefinitions();
    }

    /**
     * {@inheritDoc}
     */
    public function getRhnTblRowDefinitions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRhnTblRowDefinitions', []);

        return parent::getRhnTblRowDefinitions();
    }

    /**
     * {@inheritDoc}
     */
    public function setRowSpans(array $displayIds)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRowSpans', [$displayIds]);

        return parent::setRowSpans($displayIds);
    }

    /**
     * {@inheritDoc}
     */
    public function getRowSpan($displayId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRowSpan', [$displayId]);

        return parent::getRowSpan($displayId);
    }

    /**
     * {@inheritDoc}
     */
    public function getRowSpans()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRowSpans', []);

        return parent::getRowSpans();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderBy(array $orderedColumns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderBy', [$orderedColumns]);

        return parent::setOrderBy($orderedColumns);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderBy', []);

        return parent::getOrderBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroupBy($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroupBy', [$id]);

        return parent::setGroupBy($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupBy', []);

        return parent::getGroupBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroupAction($name, array $arg, $dependences = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroupAction', [$name, $arg, $dependences]);

        return parent::setGroupAction($name, $arg, $dependences);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupAction', []);

        return parent::getGroupAction();
    }

    /**
     * {@inheritDoc}
     */
    public function hasGroupAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasGroupAction', []);

        return parent::hasGroupAction();
    }

    /**
     * {@inheritDoc}
     */
    public function setExtendingGroupAction($dependences = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExtendingGroupAction', [$dependences]);

        return parent::setExtendingGroupAction($dependences);
    }

    /**
     * {@inheritDoc}
     */
    public function getExtendingGroupAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExtendingGroupAction', []);

        return parent::getExtendingGroupAction();
    }

    /**
     * {@inheritDoc}
     */
    public function hasExtendingGroupAction()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasExtendingGroupAction', []);

        return parent::hasExtendingGroupAction();
    }

    /**
     * {@inheritDoc}
     */
    public function addAction($name, array $arg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAction', [$name, $arg]);

        return parent::addAction($name, $arg);
    }

    /**
     * {@inheritDoc}
     */
    public function getActions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActions', []);

        return parent::getActions();
    }

    /**
     * {@inheritDoc}
     */
    public function hasActions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasActions', []);

        return parent::hasActions();
    }

    /**
     * {@inheritDoc}
     */
    public function getItem($displayId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getItem', [$displayId]);

        return parent::getItem($displayId);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function getHead()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHead', []);

        return parent::getHead();
    }

    /**
     * {@inheritDoc}
     */
    public function getConditionalFormattings()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConditionalFormattings', []);

        return parent::getConditionalFormattings();
    }

    /**
     * {@inheritDoc}
     */
    public function addConditionalFormatting($selectedColumn, array $displayIds, $condition, array $classes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addConditionalFormatting', [$selectedColumn, $displayIds, $condition, $classes]);

        return parent::addConditionalFormatting($selectedColumn, $displayIds, $condition, $classes);
    }

    /**
     * {@inheritDoc}
     */
    public function getRows()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRows', []);

        return parent::getRows();
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', []);

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function setData(\Earls\RhinoReportBundle\Module\Table\Util\DataObject $data)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setData', [$data]);

        return parent::setData($data);
    }

    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function end()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'end', []);

        return parent::end();
    }

    /**
     * {@inheritDoc}
     */
    public function setExportConfig($type, \Earls\RhinoReportBundle\Templating\ExportConfigurator\ExportConfigurator $config)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExportConfig', [$type, $config]);

        return parent::setExportConfig($type, $config);
    }

    /**
     * {@inheritDoc}
     */
    public function setExportConfigs(array $configs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExportConfigs', [$configs]);

        return parent::setExportConfigs($configs);
    }

    /**
     * {@inheritDoc}
     */
    public function getExportConfig($type = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExportConfig', [$type]);

        return parent::getExportConfig($type);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttribute($attr, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttribute', [$attr, $value]);

        return parent::setAttribute($attr, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributes(array $attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributes', [$attributes]);

        return parent::setAttributes($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getDisplayId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDisplayId', []);

        return parent::getDisplayId();
    }

    /**
     * {@inheritDoc}
     */
    public function setDisplayId($displayId)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDisplayId', [$displayId]);

        return parent::setDisplayId($displayId);
    }

}
